// Copyright (c) 2012-2013, Jordi Corbilla
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// - Neither the name of this library nor the names of its contributors may be
// used to endorse or promote products derived from this software without
// specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

unit Testthundax.ClassOperator;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, thundax.classOperator.example;

type
  // Test methods for record TClassOperator

  TestTClassOperator = class(TTestCase)
  strict private

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestOperators;
  end;

implementation

procedure TestTClassOperator.SetUp;
begin

end;

procedure TestTClassOperator.TearDown;
begin

end;

procedure TestTClassOperator.TestOperators;
var
  x, y, b: TMyRecord;
begin
  x := 12; // Implicit conversion from an Integer
  CheckTrue(x = 12, 'Error implicit conversion from an Integer');
  y := x + x; // Calls TMyRecord.Add(a, b: TMyClass): TMyClass
  CheckTrue(y = 24, 'Error Addition');
  b := x;
  b := b + 100 + y; // Calls TMyRecord.Add(a, b) twice
  CheckTrue(b = 136, 'Error Complex Addition');
  b := b * 2; // Calls TMyRecord.Multiply(a, b)
  CheckTrue(b = 272, 'Error Multiplication');
  b := b div 2; // Calls TMyRecord.IntDivide(a, b)
  CheckTrue(b = 136, 'Error Division');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTClassOperator.Suite);
end.


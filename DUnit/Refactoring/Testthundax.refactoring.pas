// Copyright (c) 2017, Jordi Corbilla
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// - Neither the name of this library nor the names of its contributors may be
// used to endorse or promote products derived from this software without
// specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

unit Testthundax.refactoring;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, thundax.refactoring.example, generics.collections;

type
  // Test methods for class TSQL

  TestTSQL = class(TTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetQuery;
    procedure TestGetQueryImperativeRefactoring;
    procedure TestGetQueryInlineRefactoring;
    procedure TestGetQueryFuncInlineRefactoring;
  end;

implementation

procedure TestTSQL.SetUp;
begin

end;

procedure TestTSQL.TearDown;
begin

end;

procedure TestTSQL.TestgetQuery;
var
  myQuery : TMyQuery;
  urlList : TList<String>;
begin
  myQuery := TMyQuery.create();
  try
    urlList := myQuery.Results('https://www.google.co.uk');
    checkTrue(urlList.Count > 0, 'Error list should not be empty');
    urlList.Free;
  finally
    myQuery.Free;
  end;
end;

procedure TestTSQL.TestGetQueryFuncInlineRefactoring;
var
  myQuery : TMyQuery;
  urlList : TList<String>;
begin
  myQuery := TMyQuery.create();
  try
    urlList := myQuery.ResultsFuncInlineRefactoring('https://www.google.co.uk');
    checkTrue(urlList.Count > 0, 'Error list should not be empty');
    urlList.Free;
  finally
    myQuery.Free;
  end;
end;

procedure TestTSQL.TestGetQueryImperativeRefactoring;
var
  myQuery : TMyQuery;
  urlList : TList<String>;
begin
  myQuery := TMyQuery.create();
  try
    urlList := myQuery.ResultsImperativeRefactoring('https://www.google.co.uk');
    checkTrue(urlList.Count > 0, 'Error list should not be empty');
    urlList.Free;
  finally
    myQuery.Free;
  end;
end;

procedure TestTSQL.TestGetQueryInlineRefactoring;
var
  myQuery : TMyQuery;
  urlList : TList<String>;
begin
  myQuery := TMyQuery.create();
  try
    urlList := myQuery.ResultsInlineRefactoring('https://www.google.co.uk');
    checkTrue(urlList.Count > 0, 'Error list should not be empty');
    urlList.Free;
  finally
    myQuery.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSQL.Suite);
end.

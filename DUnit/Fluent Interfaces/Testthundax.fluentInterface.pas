//  Copyright (c) 2012, Jordi Corbilla
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//  - Neither the name of this library nor the names of its contributors may be
//    used to endorse or promote products derived from this software without
//    specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.

unit Testthundax.fluentInterface;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Generics.Defaults, Generics.collections,
  thundax.fluentInterface.testimplementation;

type
  // Test methods for class TQueryImplementation

  TestTQueryImplementation = class(TTestCase)
  strict private
    FQueryImplementation: TQueryImplementation;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetIntegerListQueryValues;
    procedure TestGetStringListQueryValues;
  end;

implementation

procedure TestTQueryImplementation.SetUp;
begin
  FQueryImplementation := TQueryImplementation.Create;
end;

procedure TestTQueryImplementation.TearDown;
begin
  FQueryImplementation.Free;
  FQueryImplementation := nil;
end;

procedure TestTQueryImplementation.TestGetIntegerListQueryValues;
var
  ReturnValue: TList<Integer>;
  item: Integer;
begin
  ReturnValue := FQueryImplementation.GetIntegerListQueryValues;
  for item in ReturnValue do
  begin
    Assert((item > 50) and (item < 75), 'Wrong Values!');
  end;
  ReturnValue.Free;
end;

procedure TestTQueryImplementation.TestGetStringListQueryValues;
var
  ReturnValue: TList<String>;
  item: String;
begin
  ReturnValue := FQueryImplementation.GetStringListQueryValues;
  for item in ReturnValue do
  begin
    Assert(Pos('A', item) > 0, 'Wrong Values!');
  end;
  ReturnValue.Free;
end;

initialization
  // Register any test cases with the test runner
  ReportMemoryLeaksOnShutdown := true;
  RegisterTest(TestTQueryImplementation.Suite);
end.

